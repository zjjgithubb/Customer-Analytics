[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Customer Analytics",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "projectanalysis.html",
    "href": "projectanalysis.html",
    "title": "Project Analysis - Customer Transaction Data",
    "section": "",
    "text": "First loading the packages:\n\npacman::p_load(ggstatsplot,plotly, patchwork, hrbrthemes, ggridges, ggrepel, tidyverse, ggpubr, scales, colorspace, ggdist)\n\n\n\n\ndf &lt;- read_csv(\"data/updated_data.csv\")\n\nNot sure why, but there are empty columns being loaded. We will remove that. Additionally, we will expand the columns to include the measure values in separate columns, e.g. Retail Price etc.\n\ndf &lt;- df %&gt;%\n  select(-18:-29)\n\ndf_transformed &lt;- df %&gt;%\n  pivot_wider(names_from = `Measure Names`, values_from = `Measure Values`)\n\nStandardise the typing format under Category Description.\n\ndf_transformed &lt;- df_transformed %&gt;%\n  mutate(`Category Description` = case_when(\n    str_detect(`Category Description`, \"Home collection\") ~ \"Home Collection\",\n    str_detect(`Category Description`, \"SKIN CARE\") ~ \"Skin Care\",\n    str_detect(`Category Description`, \"Skin care\") ~ \"Skin Care\",\n    str_detect(`Category Description`, \"ORAL CARE\") ~ \"Oral Care\",\n    TRUE ~ `Category Description`\n  ))"
  },
  {
    "objectID": "projectanalysis.html#reading-the-data",
    "href": "projectanalysis.html#reading-the-data",
    "title": "Project Analysis - Customer Transaction Data",
    "section": "",
    "text": "df &lt;- read_csv(\"data/updated_data.csv\")\n\nNot sure why, but there are empty columns being loaded. We will remove that. Additionally, we will expand the columns to include the measure values in separate columns, e.g. Retail Price etc.\n\ndf &lt;- df %&gt;%\n  select(-18:-29)\n\ndf_transformed &lt;- df %&gt;%\n  pivot_wider(names_from = `Measure Names`, values_from = `Measure Values`)\n\nStandardise the typing format under Category Description.\n\ndf_transformed &lt;- df_transformed %&gt;%\n  mutate(`Category Description` = case_when(\n    str_detect(`Category Description`, \"Home collection\") ~ \"Home Collection\",\n    str_detect(`Category Description`, \"SKIN CARE\") ~ \"Skin Care\",\n    str_detect(`Category Description`, \"Skin care\") ~ \"Skin Care\",\n    str_detect(`Category Description`, \"ORAL CARE\") ~ \"Oral Care\",\n    TRUE ~ `Category Description`\n  ))"
  },
  {
    "objectID": "projectanalysis.html#number-of-rows-with-net-price-0-customer-who-received-samples",
    "href": "projectanalysis.html#number-of-rows-with-net-price-0-customer-who-received-samples",
    "title": "Project Analysis - Customer Transaction Data",
    "section": "2.1 Number of Rows with Net Price = 0 / Customer who received Samples",
    "text": "2.1 Number of Rows with Net Price = 0 / Customer who received Samples\n\nnum_zeros &lt;- df_transformed %&gt;%   \n  filter(`Net Price (SGD)` == 0)\n\nWe have 40,049 observations with net price = 0. Based on the product description, these looks like sample products that are given with the purchase.\nLet’s do a count of the number of customers and their IDs who received these samples.\n\nsamples_per_customer &lt;- num_zeros %&gt;%   \n  group_by(Customer) %&gt;%   \n  summarise(samples_received = n_distinct(`Order No`))\n\nFrom the data - we have 11,329 unique customers who received these samples.\nQuick visualisation on the number of samples per customers:\n\nggplot(data=samples_per_customer,         \n       aes(x = samples_received)) +   \n  geom_bar(bins=1,                   \n           boundary = 100,                  \n           color=\"grey25\",                   \n           fill=\"grey90\") +   \n  theme_minimal() +   \n  xlim(0,5) +   \n  ggtitle(\"Samples Per Customers\")\n\n\n\n\n\n\n\n\nCan see that most of them only received 1 samples.\nWe remove these samples from the main dataset:\n\ndf_filtered &lt;- df_transformed %&gt;%   \n  filter(`Net Price (SGD)` != 0) %&gt;%   \n  filter(`Retail Price (SGD)` != 0)\n\ndf_filtered &lt;- df_filtered %&gt;%   \n  mutate(per_discount = (`Item Discount (SGD)` / `Retail Price (SGD)` * 100)) %&gt;%\n  mutate(per_discount = ifelse(is.infinite(per_discount), NA, per_discount))"
  },
  {
    "objectID": "projectanalysis.html#checking-customer-data",
    "href": "projectanalysis.html#checking-customer-data",
    "title": "Project Analysis - Customer Transaction Data",
    "section": "2.2 Checking Customer Data",
    "text": "2.2 Checking Customer Data\n\n2.1.1 Number of Customers\nFirst, lets see how many unique customers are there.\n\nnum_unique_customers &lt;- df_filtered %&gt;%\n  distinct(Customer, `Customer Gender`, Country) %&gt;%\n  mutate(`Customer Gender` = factor(`Customer Gender`),\n         Country = factor(Country)) \n\nsummary(num_unique_customers)\n\n    Customer       Customer Gender Country   \n Min.   :1000350   F      :8782    MY: 3618  \n 1st Qu.:2116865   M      :2881    SG:17046  \n Median :3471894   Unknown:9001              \n Mean   :3243219                             \n 3rd Qu.:4291294                             \n Max.   :5230122                             \n\n\nThe data comprise 20664 unique customer ID.\nOf which, we have 11,663 customers with gender. From these data, we have 8782 Female Customers and 2881 Male Customers.\n\n\n2.1.2 Number of Orders and Number of Products\n\n# Calculate the total number of products purchased by each customer\nproducts_per_customer &lt;- df_filtered %&gt;%\n  group_by(Customer) %&gt;%\n  summarise(total_num_products = sum(Qty))\n\nsummary(products_per_customer)\n\n    Customer       total_num_products\n Min.   :1000350   Min.   :    1.00  \n 1st Qu.:2116865   1st Qu.:    1.00  \n Median :3471894   Median :    2.00  \n Mean   :3243219   Mean   :    9.73  \n 3rd Qu.:4291294   3rd Qu.:    3.00  \n Max.   :5230122   Max.   :84799.00  \n\n# Calculate the number of orders made by each customer\norders_per_customer &lt;- df_filtered  %&gt;%\n  group_by(Customer) %&gt;%\n  summarise(Freq = n_distinct(`Order No`),\n            Monetary = sum(`Net Price (SGD)`, na.rm = TRUE))\n\nsummary (orders_per_customer)\n\n    Customer            Freq            Monetary      \n Min.   :1000350   Min.   :  1.000   Min.   :      1  \n 1st Qu.:2116865   1st Qu.:  1.000   1st Qu.:    158  \n Median :3471894   Median :  1.000   Median :    312  \n Mean   :3243219   Mean   :  1.597   Mean   :   1012  \n 3rd Qu.:4291294   3rd Qu.:  1.000   3rd Qu.:    556  \n Max.   :5230122   Max.   :457.000   Max.   :3599713  \n\n\nFor the study here - I just define Freq as the number of orders within the 2 years period, i.e. even if within the same month or week.\n\n\nCode\nhead(products_per_customer[order(products_per_customer$total_num_products, decreasing = TRUE), ], 30)\n\n\n# A tibble: 30 × 2\n   Customer total_num_products\n      &lt;dbl&gt;              &lt;dbl&gt;\n 1  3558061              84799\n 2  4497811              15530\n 3  1117958              10630\n 4  3264222               6452\n 5  1678261               1428\n 6  2062441               1390\n 7  1199830               1108\n 8  1664656                720\n 9  2011870                700\n10  1900810                670\n# ℹ 20 more rows\n\n\n\n\nCode\nhead(orders_per_customer[order(orders_per_customer$Monetary, decreasing = TRUE), ], 30)\n\n\n# A tibble: 30 × 3\n   Customer  Freq Monetary\n      &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt;\n 1  3558061    20 3599713.\n 2  1117958   457 2505904.\n 3  4497811    14  875207.\n 4  3264222    21  679898.\n 5  1678261    22  349773.\n 6  1494594    57  260759.\n 7  4498726     9  189137.\n 8  1199830    50  158623.\n 9  2126742    60  114673.\n10  2603534    45  108388.\n# ℹ 20 more rows\n\n\nWe may need to filter out these customers subsequently as they do not represent the average customers - also to find out where are they from.\n\nggplot(data=orders_per_customer, \n       aes(x = Freq)) +\n  geom_bar(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_minimal() +\n  geom_text(stat='count', aes(label=..count..), vjust=-1, size = 2) +\n  xlim(0,20) +\n  ggtitle(\"Count of Number of Orders\")\n\n\n\n\n\n\n\n\n\n\n2.1.3 Calculating Recency\nI calculated recency based on the last day of order and the number of days in between then and 14 May 24.\n\ndf_dates &lt;- df_filtered %&gt;%   \n  mutate(`Document Date` = as.Date(as.character(`Document Date`),format='%d/%m/%Y'))  \n\ndate &lt;- as.Date(\"14/May/2024\", format=\"%d/%b/%Y\")\na &lt;- as.numeric(date)     \n\nrecency_per_customer &lt;- df_dates %&gt;%   \n  group_by(Customer) %&gt;%   \n  summarise(recency = a - as.numeric(max(`Document Date`), format=\"%d/%m/%Y\"))  \nsummary(recency_per_customer)\n\n    Customer          recency     \n Min.   :1000350   Min.   :135.0  \n 1st Qu.:2116865   1st Qu.:267.0  \n Median :3471894   Median :477.0  \n Mean   :3243219   Mean   :473.2  \n 3rd Qu.:4291294   3rd Qu.:667.0  \n Max.   :5230122   Max.   :864.0  \n\n\n\n\n2.1.4 Checking the mode of purchase and types of products\nFirst, to check the summary of the category description.\n\nsummary(as.factor(df_filtered$`Category Description`))\n\n      Bath and Body  Beauty Accessories Fashion Accessories           Fragrance \n               7957                 283                 129               33688 \n           Haircare     Home Collection             Make up           Oral Care \n               2670                9131                1419                 252 \n          Skin Care \n              10196 \n\n\n\n# Group by customers and create indicator columns\ndf_indicators &lt;- df_filtered %&gt;%\n  group_by(Customer) %&gt;%\n  reframe(\n    retail = ifelse(\"Retail\" %in% `Sales Channel`, \"Yes\", \"No\"),\n    third_party = ifelse(\"3rd Party Marketplaces\" %in% `Sales Channel`, \"Yes\", \"No\"),\n    corp = ifelse(\"Corp Sales\" %in% `Sales Channel`, \"Yes\", \"No\"),\n    website = ifelse(\"eCommerce Stores\" %in% `Sales Channel`, \"Yes\", \"No\"),\n    fragrance = ifelse(\"Fragrance\" %in% `Category Description`, \"Yes\", \"No\"),\n    skincare = ifelse(\"Skin Care\" %in% `Category Description`, \"Yes\", \"No\"),\n    bathbody = ifelse(\"Bath and Body\" %in% `Category Description`, \"Yes\", \"No\"),\n    home = ifelse(\"Home Collection\" %in% `Category Description`, \"Yes\", \"No\"),\n    haircare = ifelse(\"Haircare\" %in% `Category Description`, \"Yes\", \"No\"),\n    makeup = ifelse(\"Make up\" %in% `Category Description`, \"Yes\", \"No\"),\n    oral = ifelse(\"Oral Care\" %in% `Category Description`, \"Yes\", \"No\"),\n    beauty_acc = ifelse(\"Beauty Accessories\" %in% `Category Description`, \"Yes\", \"No\"),\n    fashion_acc = ifelse(\"Fashion Accessories\" %in% `Category Description`, \"Yes\", \"No\")\n    ) \n\n\n\n2.1.5 Looking across brands\n\nsummary(as.factor(df_filtered$`Brand Description`))\n\n           3LAB SKINCARE      Masion de L\\x92asie           ACQUA DI PARMA \n                       3                       78                     5359 \n                 AMOUAGE            ANNICK GOUTAL                    AVEDA \n                    1048                     1064                      949 \n       BJORK AND BERRIES        BKR WATER BOTTLES                BOUCHERON \n                     946                       36                       28 \n                 BVLGARI               BY KILLIAN                 BY TERRY \n                     544                     1727                     1103 \n        BYREDO FRAGRANCE                  CHOPARD       CIRE TRUDON CANDLE \n                    5491                        2                     1020 \n       COMME DES GARCONS                    CREED             D.S. & DURGA \n                      36                     2781                      496 \n                DIPTYQUE                  EVE LOM                 FLORAIKU \n                    7946                      663                       80 \n              FORNASETTI           FREDERIC MALLE              GINORI 1735 \n                       5                     2283                       65 \n                  HERMES                HERMETICA               JACK BLACK \n                     963                       40                      676 \n     JUNGSAEMMOOL BEAUTY                   Kayali                LA BRUKET \n                       5                      301                     1701 \n            LEONOR GREYL                    LOEWE          MAISON CRIVELLI \n                     798                      344                      393 \nMAISON FRANCIS KURKDJIAN            MALIN + GOETZ         MATIERE PREMIERE \n                    7818                     2789                       70 \n                    MEMO            MILLER HARRIS        MONCLER FRAGRANCE \n                     739                       46                      371 \n                 OLAPLEX               OMOROVICZA               PENHALIGON \n                     225                       45                     3532 \n              PMD Beauty                     POLA      Santa Maria Novella \n                      13                       37                      484 \n            SERGE LUTENS                     SLIP                   TALIKA \n                    1104                      247                      675 \n            THE ORDINARY                    THREE           Valeur Absolue \n                    7113                      197                       48 \n       VAN CLEEF & ARPEL           VERSO SKINCARE                  vVARDIS \n                     882                       64                      252 \n\n\n\ndf_filtered &lt;- df_filtered %&gt;%\n  mutate(\n    `Brand Description` = if_else(`Brand Description` == \"Masion de L\\x92asie\", \"Masion de L\",\n    if_else(`Brand Description` == \"MALIN + GOETZ\", \"MALINGOETZ.\",\n                                           `Brand Description`))\n  )\n\n\ndf_brands &lt;- df_filtered %&gt;%\n  pivot_wider(names_from = `Brand Description`, values_from = `Qty`) %&gt;% \n  select(Customer, 23:76)\n\ndf_brands[is.na(df_brands)] &lt;- 0\n\n\ndf_brand1 &lt;- df_brands %&gt;%\n  group_by(Customer) %&gt;%\n  summarise(across(1:54, ~sum(.)))\n\n\n\n2.1.6 Looking at the Discounts\nWe have earlier created the percentage discount per orders. Seems weird - but there is one with a discount of more than 100%. So we will filter that out.\n\nsummary(df_filtered$per_discount)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   2.893   0.000 232.000 \n\n\n\ndf_filtered &lt;- df_filtered %&gt;% \n  filter(per_discount &lt;= 100)\n\nPlot the range of the discount:\n\nggplot(df_filtered, aes(x = per_discount)) +\n  geom_histogram(binwidth = 10, fill = \"lightblue\", color = \"black\") +\n  labs(title = \"Histogram of Discount\", x = \"Discount\", y = \"Frequency\") +\n  theme_minimal ()\n\n\n\n\n\n\n\n\n\ndf_filtered &lt;- df_filtered %&gt;%\n  mutate(discount_category = cut(per_discount, breaks = c(-Inf, 0, 10, 20, 30, 40, Inf), labels = c(\"no_disc\", \"0_10\", \"10_20\", \"20_30\", \"30_40\", \"40_abv\")))\n\ndf_discount &lt;- df_filtered %&gt;%\n  pivot_wider(names_from = discount_category, values_from = `Qty`) %&gt;%\n  group_by(Customer) %&gt;%\n  summarise(across(24:29, ~sum(.)))\n\nWe also plot the count of orders and their discount type:\n\nggplot(df_filtered, aes(x = discount_category)) +\n  geom_bar(fill = \"lightblue\", color = \"black\") +\n  labs(title = \"Count of Orders by Discount Category\", x = \"Discount\", y = \"Frequency\") +\n  ylim(0,70000) +\n  geom_text(stat='count', aes(label=..count..), vjust=-1) + \n  theme_minimal()\n\n\n\n\n\n\n\n\n\ndf_discount &lt;- df_discount %&gt;%\n  mutate(across(2:7, ~ifelse(is.na(.), \"No\", ifelse(. &gt; 1, \"Yes\", \"No\"))))\n\n\ndf_discount &lt;- df_discount %&gt;%\n  mutate(discount = ifelse(rowSums(across(2:7, ~ . == \"Yes\")) &gt; 0, \"Yes\", \"No\"))\n\n\nggplot(df_discount, aes(x = discount)) +\n  geom_bar(fill = \"lightblue\", color = \"black\") +\n  labs(title = \"Number of Customers who ordered with any discount\", x = \"Discount\", y = \"Frequency\") +\n  ylim(0,12000) +\n  geom_text(stat='count', aes(label=..count..), vjust=-1) + # Use stat='count' to label counts\n  theme_minimal()"
  },
  {
    "objectID": "datacleaning.html",
    "href": "datacleaning.html",
    "title": "EDA",
    "section": "",
    "text": "First loading the packages:\n\npacman::p_load(ggstatsplot,plotly, patchwork, hrbrthemes, ggridges, ggrepel, tidyverse, ggpubr, scales, colorspace, ggdist)\n\n\n\n\ndf &lt;- read_csv(\"data/updated_data.csv\")\n\nNot sure why, but there are empty columns being loaded. We will remove that. Additionally, we will expand the columns to include the measure values in separate columns, e.g. Retail Price etc.\n\ndf &lt;- df %&gt;%\n  select(-18:-29)\n\ndf_transformed &lt;- df %&gt;%\n  pivot_wider(names_from = `Measure Names`, values_from = `Measure Values`)\n\nStandardise the typing format under Category Description.\n\ndf_transformed &lt;- df_transformed %&gt;%\n  mutate(`Category Description` = case_when(\n    str_detect(`Category Description`, \"Home collection\") ~ \"Home Collection\",\n    str_detect(`Category Description`, \"SKIN CARE\") ~ \"Skin Care\",\n    str_detect(`Category Description`, \"Skin care\") ~ \"Skin Care\",\n    str_detect(`Category Description`, \"ORAL CARE\") ~ \"Oral Care\",\n    TRUE ~ `Category Description`\n  ))"
  },
  {
    "objectID": "datacleaning.html#reading-the-data",
    "href": "datacleaning.html#reading-the-data",
    "title": "EDA",
    "section": "",
    "text": "df &lt;- read_csv(\"data/updated_data.csv\")\n\nNot sure why, but there are empty columns being loaded. We will remove that. Additionally, we will expand the columns to include the measure values in separate columns, e.g. Retail Price etc.\n\ndf &lt;- df %&gt;%\n  select(-18:-29)\n\ndf_transformed &lt;- df %&gt;%\n  pivot_wider(names_from = `Measure Names`, values_from = `Measure Values`)\n\nStandardise the typing format under Category Description.\n\ndf_transformed &lt;- df_transformed %&gt;%\n  mutate(`Category Description` = case_when(\n    str_detect(`Category Description`, \"Home collection\") ~ \"Home Collection\",\n    str_detect(`Category Description`, \"SKIN CARE\") ~ \"Skin Care\",\n    str_detect(`Category Description`, \"Skin care\") ~ \"Skin Care\",\n    str_detect(`Category Description`, \"ORAL CARE\") ~ \"Oral Care\",\n    TRUE ~ `Category Description`\n  ))"
  },
  {
    "objectID": "datacleaning.html#number-of-rows-with-net-price-0-customer-who-received-samples",
    "href": "datacleaning.html#number-of-rows-with-net-price-0-customer-who-received-samples",
    "title": "EDA",
    "section": "2.1 Number of Rows with Net Price = 0 / Customer who received Samples",
    "text": "2.1 Number of Rows with Net Price = 0 / Customer who received Samples\n\nnum_zeros &lt;- df_transformed %&gt;%   \n  filter(`Net Price (SGD)` == 0)\n\nWe have 40,049 observations with net price = 0. Based on the product description, these looks like sample products that are given with the purchase.\nLet’s do a count of the number of customers and their IDs who received these samples.\n\nsamples_per_customer &lt;- num_zeros %&gt;%   \n  group_by(Customer) %&gt;%   \n  summarise(samples_received = n_distinct(`Order No`))\n\nFrom the data - we have 11,329 unique customers who received these samples.\nQuick visualisation on the number of samples per customers:\n\nggplot(data=samples_per_customer,         \n       aes(x = samples_received)) +   \n  geom_bar(bins=1,                   \n           boundary = 100,                  \n           color=\"grey25\",                   \n           fill=\"grey90\") +   \n  theme_minimal() +   \n  xlim(0,5) +   \n  ggtitle(\"Samples Per Customers\")\n\n\n\n\nCan see that most of them only received 1 samples.\nWe remove these samples from the main dataset:\n\ndf_filtered &lt;- df_transformed %&gt;%   \n  filter(`Net Price (SGD)` != 0) %&gt;%   \n  filter(`Retail Price (SGD)` != 0)\n\ndf_filtered &lt;- df_filtered %&gt;%   \n  mutate(per_discount = (`Item Discount (SGD)` / `Retail Price (SGD)` * 100)) %&gt;%\n  mutate(per_discount = ifelse(is.infinite(per_discount), NA, per_discount))"
  },
  {
    "objectID": "datacleaning.html#checking-customer-data",
    "href": "datacleaning.html#checking-customer-data",
    "title": "EDA",
    "section": "2.2 Checking Customer Data",
    "text": "2.2 Checking Customer Data\n\n2.1.1 Number of Customers\nFirst, lets see how many unique customers are there.\n\nnum_unique_customers &lt;- df_filtered %&gt;%\n  distinct(Customer, `Customer Gender`, Country) %&gt;%\n  mutate(`Customer Gender` = factor(`Customer Gender`),\n         Country = factor(Country)) \n\nsummary(num_unique_customers)\n\n    Customer       Customer Gender Country   \n Min.   :1000350   F      :8782    MY: 3618  \n 1st Qu.:2116865   M      :2881    SG:17046  \n Median :3471894   Unknown:9001              \n Mean   :3243219                             \n 3rd Qu.:4291294                             \n Max.   :5230122                             \n\n\nThe data comprise 20664 unique customer ID.\nOf which, we have 11,663 customers with gender. From these data, we have 8782 Female Customers and 2881 Male Customers.\n\n\n2.1.2 Number of Orders and Number of Products\n\n# Calculate the total number of products purchased by each customer\nproducts_per_customer &lt;- df_filtered %&gt;%\n  group_by(Customer) %&gt;%\n  summarise(total_num_products = sum(Qty))\n\nsummary(products_per_customer)\n\n    Customer       total_num_products\n Min.   :1000350   Min.   :    1.00  \n 1st Qu.:2116865   1st Qu.:    1.00  \n Median :3471894   Median :    2.00  \n Mean   :3243219   Mean   :    9.73  \n 3rd Qu.:4291294   3rd Qu.:    3.00  \n Max.   :5230122   Max.   :84799.00  \n\n# Calculate the number of orders made by each customer\norders_per_customer &lt;- df_filtered  %&gt;%\n  group_by(Customer) %&gt;%\n  summarise(Freq = n_distinct(`Order No`),\n            Monetary = sum(`Net Price (SGD)`, na.rm = TRUE))\n\nsummary (orders_per_customer)\n\n    Customer            Freq            Monetary      \n Min.   :1000350   Min.   :  1.000   Min.   :      1  \n 1st Qu.:2116865   1st Qu.:  1.000   1st Qu.:    158  \n Median :3471894   Median :  1.000   Median :    312  \n Mean   :3243219   Mean   :  1.597   Mean   :   1012  \n 3rd Qu.:4291294   3rd Qu.:  1.000   3rd Qu.:    556  \n Max.   :5230122   Max.   :457.000   Max.   :3599713  \n\n\n\n\nCode\nhead(products_per_customer[order(products_per_customer$total_num_products, decreasing = TRUE), ], 30)\n\n\n# A tibble: 30 × 2\n   Customer total_num_products\n      &lt;dbl&gt;              &lt;dbl&gt;\n 1  3558061              84799\n 2  4497811              15530\n 3  1117958              10630\n 4  3264222               6452\n 5  1678261               1428\n 6  2062441               1390\n 7  1199830               1108\n 8  1664656                720\n 9  2011870                700\n10  1900810                670\n# ℹ 20 more rows\n\n\n\n\nCode\nhead(orders_per_customer[order(orders_per_customer$Monetary, decreasing = TRUE), ], 30)\n\n\n# A tibble: 30 × 3\n   Customer  Freq Monetary\n      &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt;\n 1  3558061    20 3599713.\n 2  1117958   457 2505904.\n 3  4497811    14  875207.\n 4  3264222    21  679898.\n 5  1678261    22  349773.\n 6  1494594    57  260759.\n 7  4498726     9  189137.\n 8  1199830    50  158623.\n 9  2126742    60  114673.\n10  2603534    45  108388.\n# ℹ 20 more rows\n\n\nWe may need to filter out these customers subsequently as they do not represent the average customers - also to find out where are they from.\n\nggplot(data=orders_per_customer, \n       aes(x = Freq)) +\n  geom_bar(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_minimal() +\n  xlim(0,20) +\n  ggtitle(\"Count of Number of Orders\")\n\n\n\n\n\n\n2.1.3 Calculating Recency\n\ndf_dates &lt;- df_filtered %&gt;%   \n  mutate(`Document Date` = as.Date(as.character(`Document Date`),format='%d/%m/%Y'))  \n\na &lt;- as.numeric(Sys.Date(), format=\"%d/%m/%Y\")     \n\nrecency_per_customer &lt;- df_dates %&gt;%   \n  group_by(Customer) %&gt;%   \n  summarise(recency = a - as.numeric(max(`Document Date`), format=\"%d/%m/%Y\"))  \nsummary(recency_per_customer)\n\n    Customer          recency     \n Min.   :1000350   Min.   :134.0  \n 1st Qu.:2116865   1st Qu.:266.0  \n Median :3471894   Median :476.0  \n Mean   :3243219   Mean   :472.2  \n 3rd Qu.:4291294   3rd Qu.:666.0  \n Max.   :5230122   Max.   :863.0  \n\n\n\n\n2.1.4 Checking the mode of purchase and types of products\nFirst, to check the summary of the category description.\n\nsummary(as.factor(df_filtered$`Category Description`))\n\n      Bath and Body  Beauty Accessories Fashion Accessories           Fragrance \n               7957                 283                 129               33688 \n           Haircare     Home Collection             Make up           Oral Care \n               2670                9131                1419                 252 \n          Skin Care \n              10196 \n\n\n\n# Group by customers and create indicator columns\ndf_indicators &lt;- df_filtered %&gt;%\n  group_by(Customer) %&gt;%\n  reframe(\n    retail = ifelse(\"Retail\" %in% `Sales Channel`, \"Yes\", \"No\"),\n    third_party = ifelse(\"3rd Party Marketplaces\" %in% `Sales Channel`, \"Yes\", \"No\"),\n    corp = ifelse(\"Corp Sales\" %in% `Sales Channel`, \"Yes\", \"No\"),\n    website = ifelse(\"eCommerce Stores\" %in% `Sales Channel`, \"Yes\", \"No\"),\n    fragrance = ifelse(\"Fragrance\" %in% `Category Description`, \"Yes\", \"No\"),\n    skincare = ifelse(\"Skin Care\" %in% `Category Description`, \"Yes\", \"No\"),\n    bathbody = ifelse(\"Bath and Body\" %in% `Category Description`, \"Yes\", \"No\"),\n    home = ifelse(\"Home Collection\" %in% `Category Description`, \"Yes\", \"No\"),\n    haircare = ifelse(\"Haircare\" %in% `Category Description`, \"Yes\", \"No\"),\n    makeup = ifelse(\"Make up\" %in% `Category Description`, \"Yes\", \"No\"),\n    oral = ifelse(\"Oral Care\" %in% `Category Description`, \"Yes\", \"No\"),\n    beauty_acc = ifelse(\"Beauty Accessories\" %in% `Category Description`, \"Yes\", \"No\"),\n    fashion_acc = ifelse(\"Fashion Accessories\" %in% `Category Description`, \"Yes\", \"No\")\n    ) \n\n\n\n2.1.5 Looking across brands\n\nsummary(as.factor(df_filtered$`Brand Description`))\n\n           3LAB SKINCARE      Masion de L\\x92asie           ACQUA DI PARMA \n                       3                       78                     5359 \n                 AMOUAGE            ANNICK GOUTAL                    AVEDA \n                    1048                     1064                      949 \n       BJORK AND BERRIES        BKR WATER BOTTLES                BOUCHERON \n                     946                       36                       28 \n                 BVLGARI               BY KILLIAN                 BY TERRY \n                     544                     1727                     1103 \n        BYREDO FRAGRANCE                  CHOPARD       CIRE TRUDON CANDLE \n                    5491                        2                     1020 \n       COMME DES GARCONS                    CREED             D.S. & DURGA \n                      36                     2781                      496 \n                DIPTYQUE                  EVE LOM                 FLORAIKU \n                    7946                      663                       80 \n              FORNASETTI           FREDERIC MALLE              GINORI 1735 \n                       5                     2283                       65 \n                  HERMES                HERMETICA               JACK BLACK \n                     963                       40                      676 \n     JUNGSAEMMOOL BEAUTY                   Kayali                LA BRUKET \n                       5                      301                     1701 \n            LEONOR GREYL                    LOEWE          MAISON CRIVELLI \n                     798                      344                      393 \nMAISON FRANCIS KURKDJIAN            MALIN + GOETZ         MATIERE PREMIERE \n                    7818                     2789                       70 \n                    MEMO            MILLER HARRIS        MONCLER FRAGRANCE \n                     739                       46                      371 \n                 OLAPLEX               OMOROVICZA               PENHALIGON \n                     225                       45                     3532 \n              PMD Beauty                     POLA      Santa Maria Novella \n                      13                       37                      484 \n            SERGE LUTENS                     SLIP                   TALIKA \n                    1104                      247                      675 \n            THE ORDINARY                    THREE           Valeur Absolue \n                    7113                      197                       48 \n       VAN CLEEF & ARPEL           VERSO SKINCARE                  vVARDIS \n                     882                       64                      252 \n\n\n\ndf_filtered &lt;- df_filtered %&gt;%\n  mutate(\n    `Brand Description` = if_else(`Brand Description` == \"Masion de L\\x92asie\", \"Masion de L\",\n    if_else(`Brand Description` == \"MALIN + GOETZ\", \"MALINGOETZ.\",\n                                           `Brand Description`))\n  )\n\n\ndf_brands &lt;- df_filtered %&gt;%\n  pivot_wider(names_from = `Brand Description`, values_from = `Qty`) %&gt;% \n  select(Customer, 23:76)\n\ndf_brands[is.na(df_brands)] &lt;- 0\n\n\ndf_brand1 &lt;- df_brands %&gt;%\n  group_by(Customer) %&gt;%\n  summarise(across(1:54, ~sum(.)))\n\n\n\n2.1.6 Looking at the Discounts\nWe have earlier created the percentage discount per orders. Seems weird - but there is one with a discount of more than 100%. So we will filter that out.\n\nsummary(df_filtered$per_discount)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   2.893   0.000 232.000 \n\n\n\ndf_filtered &lt;- df_filtered %&gt;% \n  filter(per_discount &lt;= 100)\n\nPlot the range of the discount:\n\nggplot(df_filtered, aes(x = per_discount)) +\n  geom_histogram(binwidth = 10, fill = \"lightblue\", color = \"black\") +\n  labs(title = \"Histogram of Discount\", x = \"Discount\", y = \"Frequency\") +\n  theme_minimal ()\n\n\n\n\n\ndf_filtered &lt;- df_filtered %&gt;%\n  mutate(discount_category = cut(per_discount, breaks = c(-Inf, 0, 25, Inf), labels = c(\"no_disc\", \"0_25\", \"25_abv\")))\n\ndf_discount &lt;- df_filtered %&gt;%\n  pivot_wider(names_from = discount_category, values_from = `Qty`) %&gt;%\n  group_by(Customer) %&gt;%\n  summarise(across(24:26, ~sum(.)))\n\n\ndf_discount &lt;- df_discount %&gt;%\n  mutate(across(2:4, ~ifelse(is.na(.), \"No\", ifelse(. &gt; 1, \"Yes\", \"No\"))))"
  },
  {
    "objectID": "assignment1.html",
    "href": "assignment1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "pacman::p_load(ggstatsplot,plotly, patchwork, hrbrthemes, ggridges, ggrepel, tidyverse, ggpubr, scales, colorspace, ggdist, zoo)\n\n\n\n\ndf &lt;- read_csv(\"data/ResponderInfo.csv\")\n\ndf2 &lt;- read_csv(\"data/Transactions.csv\")\n\n\n\n\n\ndf$response_value &lt;- factor(df$response_value)\n\nsummary(df)\n\n Customer_Number    response_value\n Length:6884        0:6237        \n Class :character   1: 647        \n Mode  :character                 \n\nunique_customers &lt;- unique(df$Customer_Number)\n\n\n\n\n\nunique_customers1 &lt;- unique(df2$Customer_Number)\n\nWe have 6889 customers here. and we have 125000 transactions.\n\nsummary(df2)\n\n Customer_Number     trans_date          tran_value    \n Length:125000      Length:125000      Min.   : 15.00  \n Class :character   Class :character   1st Qu.: 70.50  \n Mode  :character   Mode  :character   Median : 97.50  \n                                       Mean   : 97.49  \n                                       3rd Qu.:124.50  \n                                       Max.   :157.50  \n\n\n\ndf2$trans_date &lt;- as.Date(df2$trans_date, format = \"%d-%b-%y\")\n\n\ndf3 &lt;- df2\n\n\ndf3 &lt;- df3 %&gt;%\n  mutate(month_year = format(trans_date, \"%b-%Y\"))\n\n# Group by month and year and count the number of transactions in each month\ndf4 &lt;- df3 %&gt;%\n  group_by(month_year) %&gt;%\n  summarise(num_transactions = n())\n\n\ndf4$trans_date &lt;- as.Date(paste0(\"01\", sep=\"-\", df4$month_year), format = \"%d-%b-%Y\")\n\ndf4 &lt;- df4 %&gt;%\n  arrange(trans_date)\n\n\nggplot(df4, aes(x = trans_date, y = num_transactions)) +\n  geom_line() +\n  geom_point() +\n  labs(x = \"Date\", y = \"Number of Transactions\", title = \"Transaction Counts Over Time\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\ndf5 &lt;- df2 %&gt;%\n  mutate(year = format(trans_date, \"%Y\"))\n\n\ncustomer_summary_year &lt;- df5 %&gt;%\n  group_by(Customer_Number, year) %&gt;%\n  summarise(num_purchases = n(),\n            avg_purchase = mean(tran_value),\n            total_purchase = sum(tran_value)\n            ) %&gt;%\n  pivot_wider(\n    names_from = year, \n    values_from = c(num_purchases, avg_purchase, total_purchase), \n    names_prefix = \"year_\"\n    ) %&gt;%\n  ungroup()\n\ncustomer_summary_year[is.na(customer_summary_year)] &lt;- 0\n\n\n\n\n\ncustomer_summary &lt;- df3 %&gt;%\n  group_by(Customer_Number) %&gt;%\n  summarise(\n    num_transactions = n(),\n    total_value = sum(tran_value, na.rm = TRUE),\n    avg_trans_value = mean(tran_value, na.rm = TRUE),\n    days_last = as.numeric(Sys.Date() - max(trans_date)),\n    days_first = as.numeric(Sys.Date() - min(trans_date))   \n  )\n\n\ncombined_df &lt;- left_join(customer_summary, df, by = \"Customer_Number\")\n\n# Replace missing values in the 'response' column with \"Missing\"\ncombined_df$response_value[is.na(combined_df$response_value)] &lt;- \"Missing\"\n\n\ncombined_df &lt;- left_join(combined_df, customer_summary_year, by =\"Customer_Number\")\n\n\nwrite_rds(combined_df, \"combined.rds\")\n\n\nwrite_csv(combined_df, \"data/customer_combined.csv\")"
  },
  {
    "objectID": "assignment1.html#reading-data",
    "href": "assignment1.html#reading-data",
    "title": "Assignment 1",
    "section": "",
    "text": "df &lt;- read_csv(\"data/ResponderInfo.csv\")\n\ndf2 &lt;- read_csv(\"data/Transactions.csv\")"
  },
  {
    "objectID": "assignment1.html#checking-data---response-values",
    "href": "assignment1.html#checking-data---response-values",
    "title": "Assignment 1",
    "section": "",
    "text": "df$response_value &lt;- factor(df$response_value)\n\nsummary(df)\n\n Customer_Number    response_value\n Length:6884        0:6237        \n Class :character   1: 647        \n Mode  :character                 \n\nunique_customers &lt;- unique(df$Customer_Number)"
  },
  {
    "objectID": "assignment1.html#checking-data---transaction-values",
    "href": "assignment1.html#checking-data---transaction-values",
    "title": "Assignment 1",
    "section": "",
    "text": "unique_customers1 &lt;- unique(df2$Customer_Number)\n\nWe have 6889 customers here. and we have 125000 transactions.\n\nsummary(df2)\n\n Customer_Number     trans_date          tran_value    \n Length:125000      Length:125000      Min.   : 15.00  \n Class :character   Class :character   1st Qu.: 70.50  \n Mode  :character   Mode  :character   Median : 97.50  \n                                       Mean   : 97.49  \n                                       3rd Qu.:124.50  \n                                       Max.   :157.50  \n\n\n\ndf2$trans_date &lt;- as.Date(df2$trans_date, format = \"%d-%b-%y\")\n\n\ndf3 &lt;- df2\n\n\ndf3 &lt;- df3 %&gt;%\n  mutate(month_year = format(trans_date, \"%b-%Y\"))\n\n# Group by month and year and count the number of transactions in each month\ndf4 &lt;- df3 %&gt;%\n  group_by(month_year) %&gt;%\n  summarise(num_transactions = n())\n\n\ndf4$trans_date &lt;- as.Date(paste0(\"01\", sep=\"-\", df4$month_year), format = \"%d-%b-%Y\")\n\ndf4 &lt;- df4 %&gt;%\n  arrange(trans_date)\n\n\nggplot(df4, aes(x = trans_date, y = num_transactions)) +\n  geom_line() +\n  geom_point() +\n  labs(x = \"Date\", y = \"Number of Transactions\", title = \"Transaction Counts Over Time\") +\n  theme_minimal()"
  },
  {
    "objectID": "assignment1.html#purchase-pattern-by-year-for-each-customer",
    "href": "assignment1.html#purchase-pattern-by-year-for-each-customer",
    "title": "Assignment 1",
    "section": "",
    "text": "df5 &lt;- df2 %&gt;%\n  mutate(year = format(trans_date, \"%Y\"))\n\n\ncustomer_summary_year &lt;- df5 %&gt;%\n  group_by(Customer_Number, year) %&gt;%\n  summarise(num_purchases = n(),\n            avg_purchase = mean(tran_value),\n            total_purchase = sum(tran_value)\n            ) %&gt;%\n  pivot_wider(\n    names_from = year, \n    values_from = c(num_purchases, avg_purchase, total_purchase), \n    names_prefix = \"year_\"\n    ) %&gt;%\n  ungroup()\n\ncustomer_summary_year[is.na(customer_summary_year)] &lt;- 0"
  },
  {
    "objectID": "assignment1.html#grouping-data-by-customer",
    "href": "assignment1.html#grouping-data-by-customer",
    "title": "Assignment 1",
    "section": "",
    "text": "customer_summary &lt;- df3 %&gt;%\n  group_by(Customer_Number) %&gt;%\n  summarise(\n    num_transactions = n(),\n    total_value = sum(tran_value, na.rm = TRUE),\n    avg_trans_value = mean(tran_value, na.rm = TRUE),\n    days_last = as.numeric(Sys.Date() - max(trans_date)),\n    days_first = as.numeric(Sys.Date() - min(trans_date))   \n  )\n\n\ncombined_df &lt;- left_join(customer_summary, df, by = \"Customer_Number\")\n\n# Replace missing values in the 'response' column with \"Missing\"\ncombined_df$response_value[is.na(combined_df$response_value)] &lt;- \"Missing\"\n\n\ncombined_df &lt;- left_join(combined_df, customer_summary_year, by =\"Customer_Number\")\n\n\nwrite_rds(combined_df, \"combined.rds\")\n\n\nwrite_csv(combined_df, \"data/customer_combined.csv\")"
  },
  {
    "objectID": "projectanalysis.html#plot-the-monetary-value-of-customers-who-are-repeat-customers-vs-those-non-repeat",
    "href": "projectanalysis.html#plot-the-monetary-value-of-customers-who-are-repeat-customers-vs-those-non-repeat",
    "title": "Project Analysis - Customer Transaction Data",
    "section": "Plot the monetary value of Customers who are repeat customers vs those non-repeat",
    "text": "Plot the monetary value of Customers who are repeat customers vs those non-repeat\n\ndf_summary &lt;- left_joined_df %&gt;%\n  mutate(freq_group = ifelse(Freq == 1, \"Frequency 1\", \"Frequency &gt; 1\")) %&gt;%\n  group_by(freq_group) %&gt;%\n  summarize(total_monetary = sum(Monetary))\n\n# Plot the summarized data\nggplot(df_summary, aes(x = freq_group, y = total_monetary, fill = freq_group)) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  labs(title = \"Total Monetary Value by Customer Frequency\",\n       x = \"Customer Frequency\",\n       y = \"Total Monetary Value (in Millions)\") +\n  scale_y_continuous(labels = scales::comma_format(scale = 1/1000000, suffix = \" M\")) +\n  theme_minimal()"
  },
  {
    "objectID": "projectanalysis.html#patterns-of-customer-using-discount",
    "href": "projectanalysis.html#patterns-of-customer-using-discount",
    "title": "Project Analysis - Customer Transaction Data",
    "section": "Patterns of Customer using Discount",
    "text": "Patterns of Customer using Discount\n\n# Summarize the data by counting the number of \"Yes\" values in the discount column\ndf_summary1 &lt;- left_joined_df %&gt;%\n  mutate(freq_group = ifelse(Freq == 1, \"Frequency 1\", \"Frequency &gt; 1\")) %&gt;%\n  group_by(freq_group) %&gt;%\n  summarize(yes_count = sum(discount == \"Yes\"))\n\n# Plot the summarized data\nggplot(df_summary1, aes(x = freq_group, y = yes_count, fill = freq_group)) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  labs(title = \"Count of 'Yes' in Discount by Customer Frequency\",\n       x = \"Customer Frequency\",\n       y = \"Count of 'Yes' in Discount\") +\n  theme_minimal()"
  }
]